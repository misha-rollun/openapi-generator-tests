<?php
/**
 * UserApiInterface
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\User;

/**
 * UserApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface UserApiInterface
{

    /**
     * Operation createUser
     *
     * Create user
     *
     * @param  \OpenAPI\Server\Model\User $user  Created user object (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\User
     */
    public function createUser(User $user = null, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\User;


    /**
     * Operation createUsersWithListInput
     *
     * Creates list of users with given input array
     *
     * @param  \OpenAPI\Server\Model\User[] $user   (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\User
     */
    public function createUsersWithListInput(array $user = null, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\User;


    /**
     * Operation deleteUser
     *
     * Delete user
     *
     * @param  \string $username  The name that needs to be deleted (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function deleteUser($username, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation getUserByName
     *
     * Get user by user name
     *
     * @param  \string $username  The name that needs to be fetched. Use user1 for testing. (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\User
     */
    public function getUserByName($username, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\User;


    /**
     * Operation loginUser
     *
     * Logs user into the system
     *
     * @param  \string $username  The user name for login (optional)
     * @param  \string $password  The password for login in clear text (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \string
     */
    public function loginUser($username = null, $password = null, &$responseCode, array &$responseHeaders): array|\string;


    /**
     * Operation logoutUser
     *
     * Logs out current logged in user session
     *
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function logoutUser(&$responseCode, array &$responseHeaders): void;


    /**
     * Operation updateUser
     *
     * Update user
     *
     * @param  \string $username  name that need to be deleted (required)
     * @param  \OpenAPI\Server\Model\User $user  Update an existent user in the store (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function updateUser($username, User $user = null, &$responseCode, array &$responseHeaders): void;

}
