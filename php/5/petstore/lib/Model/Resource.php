<?php
/**
 * Resource
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Resource Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Resource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Resource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'field1' => 'string',
        'field2' => 'string',
        'field3' => 'string',
        'field4' => 'string',
        'field5' => 'string',
        'field6' => 'string',
        'field7' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'field1' => null,
        'field2' => null,
        'field3' => null,
        'field4' => null,
        'field5' => null,
        'field6' => null,
        'field7' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field1' => 'field1',
        'field2' => 'field2',
        'field3' => 'field3',
        'field4' => 'field4',
        'field5' => 'field5',
        'field6' => 'field6',
        'field7' => 'field7'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field1' => 'setField1',
        'field2' => 'setField2',
        'field3' => 'setField3',
        'field4' => 'setField4',
        'field5' => 'setField5',
        'field6' => 'setField6',
        'field7' => 'setField7'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field1' => 'getField1',
        'field2' => 'getField2',
        'field3' => 'getField3',
        'field4' => 'getField4',
        'field5' => 'getField5',
        'field6' => 'getField6',
        'field7' => 'getField7'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field1'] = $data['field1'] ?? null;
        $this->container['field2'] = $data['field2'] ?? null;
        $this->container['field3'] = $data['field3'] ?? null;
        $this->container['field4'] = $data['field4'] ?? null;
        $this->container['field5'] = $data['field5'] ?? null;
        $this->container['field6'] = $data['field6'] ?? null;
        $this->container['field7'] = $data['field7'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field1
     *
     * @return string|null
     */
    public function getField1()
    {
        return $this->container['field1'];
    }

    /**
     * Sets field1
     *
     * @param string|null $field1 Note: this is my very very very  long string
     *
     * @return self
     */
    public function setField1($field1)
    {
        $this->container['field1'] = $field1;

        return $this;
    }

    /**
     * Gets field2
     *
     * @return string|null
     */
    public function getField2()
    {
        return $this->container['field2'];
    }

    /**
     * Sets field2
     *
     * @param string|null $field2 Note: this is my very very very  long string
     *
     * @return self
     */
    public function setField2($field2)
    {
        $this->container['field2'] = $field2;

        return $this;
    }

    /**
     * Gets field3
     *
     * @return string|null
     */
    public function getField3()
    {
        return $this->container['field3'];
    }

    /**
     * Sets field3
     *
     * @param string|null $field3 Note: this is my very very very  long string
     *
     * @return self
     */
    public function setField3($field3)
    {
        $this->container['field3'] = $field3;

        return $this;
    }

    /**
     * Gets field4
     *
     * @return string|null
     */
    public function getField4()
    {
        return $this->container['field4'];
    }

    /**
     * Sets field4
     *
     * @param string|null $field4 Note: this is my very very very  long string
     *
     * @return self
     */
    public function setField4($field4)
    {
        $this->container['field4'] = $field4;

        return $this;
    }

    /**
     * Gets field5
     *
     * @return string|null
     */
    public function getField5()
    {
        return $this->container['field5'];
    }

    /**
     * Sets field5
     *
     * @param string|null $field5 Note: this is my very very very  long string
     *
     * @return self
     */
    public function setField5($field5)
    {
        $this->container['field5'] = $field5;

        return $this;
    }

    /**
     * Gets field6
     *
     * @return string|null
     */
    public function getField6()
    {
        return $this->container['field6'];
    }

    /**
     * Sets field6
     *
     * @param string|null $field6 Note: this is my very very very  long string
     *
     * @return self
     */
    public function setField6($field6)
    {
        $this->container['field6'] = $field6;

        return $this;
    }

    /**
     * Gets field7
     *
     * @return string|null
     */
    public function getField7()
    {
        return $this->container['field7'];
    }

    /**
     * Sets field7
     *
     * @param string|null $field7 Note: this is my very very very  long string
     *
     * @return self
     */
    public function setField7($field7)
    {
        $this->container['field7'] = $field7;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


